{"ast":null,"code":"import _slicedToArray from \"/workspaces/Backwoodaroma/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { base64Decode, base64Encode } from '../encoding/base64';\nimport { md5 } from '../encoding/md5';\nimport { LicenseStatus } from '../utils/licenseStatus';\nimport { LICENSE_SCOPES } from '../utils/licenseScope';\nimport { LICENSING_MODELS } from '../utils/licensingModel';\nvar getDefaultReleaseDate = function getDefaultReleaseDate() {\n  var today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return today;\n};\nexport function generateReleaseInfo() {\n  var releaseDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getDefaultReleaseDate();\n  return base64Encode(releaseDate.getTime().toString());\n}\nvar expiryReg = /^.*EXPIRY=([0-9]+),.*$/;\n\n/**\n * Format: ORDER:${orderNumber},EXPIRY=${expiryTimestamp},KEYVERSION=1\n */\nvar decodeLicenseVersion1 = function decodeLicenseVersion1(license) {\n  var expiryTimestamp;\n  try {\n    expiryTimestamp = parseInt(license.match(expiryReg)[1], 10);\n    if (!expiryTimestamp || Number.isNaN(expiryTimestamp)) {\n      expiryTimestamp = null;\n    }\n  } catch (err) {\n    expiryTimestamp = null;\n  }\n  return {\n    scope: 'pro',\n    licensingModel: 'perpetual',\n    expiryTimestamp: expiryTimestamp\n  };\n};\n/**\n * Format: O=${orderNumber},E=${expiryTimestamp},S=${scope},LM=${licensingModel},KV=2`;\n */\n\nvar decodeLicenseVersion2 = function decodeLicenseVersion2(license) {\n  var licenseInfo = {\n    scope: null,\n    licensingModel: null,\n    expiryTimestamp: null\n  };\n  license.split(',').map(function (token) {\n    return token.split('=');\n  }).filter(function (el) {\n    return el.length === 2;\n  }).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    if (key === 'S') {\n      licenseInfo.scope = value;\n    }\n    if (key === 'LM') {\n      licenseInfo.licensingModel = value;\n    }\n    if (key === 'E') {\n      var expiryTimestamp = parseInt(value, 10);\n      if (expiryTimestamp && !Number.isNaN(expiryTimestamp)) {\n        licenseInfo.expiryTimestamp = expiryTimestamp;\n      }\n    }\n  });\n  return licenseInfo;\n};\n/**\n * Decode the license based on its key version and return a version-agnostic `MuiLicense` object.\n */\n\nvar decodeLicense = function decodeLicense(encodedLicense) {\n  var license = base64Decode(encodedLicense);\n  if (license.includes('KEYVERSION=1')) {\n    return decodeLicenseVersion1(license);\n  }\n  if (license.includes('KV=2')) {\n    return decodeLicenseVersion2(license);\n  }\n  return null;\n};\nexport function verifyLicense(_ref3) {\n  var releaseInfo = _ref3.releaseInfo,\n    licenseKey = _ref3.licenseKey,\n    acceptedScopes = _ref3.acceptedScopes,\n    isProduction = _ref3.isProduction;\n  if (!releaseInfo) {\n    throw new Error('MUI: The release information is missing. Not able to validate license.');\n  }\n  if (!licenseKey) {\n    return LicenseStatus.NotFound;\n  }\n  var hash = licenseKey.substr(0, 32);\n  var encoded = licenseKey.substr(32);\n  if (hash !== md5(encoded)) {\n    return LicenseStatus.Invalid;\n  }\n  var license = decodeLicense(encoded);\n  if (license == null) {\n    console.error('Error checking license. Key version not found!');\n    return LicenseStatus.Invalid;\n  }\n  if (license.licensingModel == null || !LICENSING_MODELS.includes(license.licensingModel)) {\n    console.error('Error checking license. Sales model not found or invalid!');\n    return LicenseStatus.Invalid;\n  }\n  if (license.expiryTimestamp == null) {\n    console.error('Error checking license. Expiry timestamp not found or invalid!');\n    return LicenseStatus.Invalid;\n  }\n  if (license.licensingModel === 'perpetual' || isProduction) {\n    var pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);\n    if (Number.isNaN(pkgTimestamp)) {\n      throw new Error('MUI: The release information is invalid. Not able to validate license.');\n    }\n    if (license.expiryTimestamp < pkgTimestamp) {\n      return LicenseStatus.Expired;\n    }\n  } else if (license.licensingModel === 'subscription') {\n    if (license.expiryTimestamp < new Date().getTime()) {\n      return LicenseStatus.Expired;\n    }\n  }\n  if (license.scope == null || !LICENSE_SCOPES.includes(license.scope)) {\n    console.error('Error checking license. scope not found or invalid!');\n    return LicenseStatus.Invalid;\n  }\n  if (!acceptedScopes.includes(license.scope)) {\n    return LicenseStatus.OutOfScope;\n  }\n  return LicenseStatus.Valid;\n}","map":{"version":3,"names":["base64Decode","base64Encode","md5","LicenseStatus","LICENSE_SCOPES","LICENSING_MODELS","getDefaultReleaseDate","today","Date","setHours","generateReleaseInfo","releaseDate","getTime","toString","expiryReg","decodeLicenseVersion1","license","expiryTimestamp","parseInt","match","Number","isNaN","err","scope","licensingModel","decodeLicenseVersion2","licenseInfo","split","map","token","filter","el","length","forEach","key","value","decodeLicense","encodedLicense","includes","verifyLicense","releaseInfo","licenseKey","acceptedScopes","isProduction","Error","NotFound","hash","substr","encoded","Invalid","console","error","pkgTimestamp","Expired","OutOfScope","Valid"],"sources":["/workspaces/Backwoodaroma/node_modules/@mui/x-license-pro/verifyLicense/verifyLicense.js"],"sourcesContent":["import { base64Decode, base64Encode } from '../encoding/base64';\nimport { md5 } from '../encoding/md5';\nimport { LicenseStatus } from '../utils/licenseStatus';\nimport { LICENSE_SCOPES } from '../utils/licenseScope';\nimport { LICENSING_MODELS } from '../utils/licensingModel';\n\nconst getDefaultReleaseDate = () => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return today;\n};\n\nexport function generateReleaseInfo(releaseDate = getDefaultReleaseDate()) {\n  return base64Encode(releaseDate.getTime().toString());\n}\nconst expiryReg = /^.*EXPIRY=([0-9]+),.*$/;\n\n/**\n * Format: ORDER:${orderNumber},EXPIRY=${expiryTimestamp},KEYVERSION=1\n */\nconst decodeLicenseVersion1 = license => {\n  let expiryTimestamp;\n\n  try {\n    expiryTimestamp = parseInt(license.match(expiryReg)[1], 10);\n\n    if (!expiryTimestamp || Number.isNaN(expiryTimestamp)) {\n      expiryTimestamp = null;\n    }\n  } catch (err) {\n    expiryTimestamp = null;\n  }\n\n  return {\n    scope: 'pro',\n    licensingModel: 'perpetual',\n    expiryTimestamp\n  };\n};\n/**\n * Format: O=${orderNumber},E=${expiryTimestamp},S=${scope},LM=${licensingModel},KV=2`;\n */\n\n\nconst decodeLicenseVersion2 = license => {\n  const licenseInfo = {\n    scope: null,\n    licensingModel: null,\n    expiryTimestamp: null\n  };\n  license.split(',').map(token => token.split('=')).filter(el => el.length === 2).forEach(([key, value]) => {\n    if (key === 'S') {\n      licenseInfo.scope = value;\n    }\n\n    if (key === 'LM') {\n      licenseInfo.licensingModel = value;\n    }\n\n    if (key === 'E') {\n      const expiryTimestamp = parseInt(value, 10);\n\n      if (expiryTimestamp && !Number.isNaN(expiryTimestamp)) {\n        licenseInfo.expiryTimestamp = expiryTimestamp;\n      }\n    }\n  });\n  return licenseInfo;\n};\n/**\n * Decode the license based on its key version and return a version-agnostic `MuiLicense` object.\n */\n\n\nconst decodeLicense = encodedLicense => {\n  const license = base64Decode(encodedLicense);\n\n  if (license.includes('KEYVERSION=1')) {\n    return decodeLicenseVersion1(license);\n  }\n\n  if (license.includes('KV=2')) {\n    return decodeLicenseVersion2(license);\n  }\n\n  return null;\n};\n\nexport function verifyLicense({\n  releaseInfo,\n  licenseKey,\n  acceptedScopes,\n  isProduction\n}) {\n  if (!releaseInfo) {\n    throw new Error('MUI: The release information is missing. Not able to validate license.');\n  }\n\n  if (!licenseKey) {\n    return LicenseStatus.NotFound;\n  }\n\n  const hash = licenseKey.substr(0, 32);\n  const encoded = licenseKey.substr(32);\n\n  if (hash !== md5(encoded)) {\n    return LicenseStatus.Invalid;\n  }\n\n  const license = decodeLicense(encoded);\n\n  if (license == null) {\n    console.error('Error checking license. Key version not found!');\n    return LicenseStatus.Invalid;\n  }\n\n  if (license.licensingModel == null || !LICENSING_MODELS.includes(license.licensingModel)) {\n    console.error('Error checking license. Sales model not found or invalid!');\n    return LicenseStatus.Invalid;\n  }\n\n  if (license.expiryTimestamp == null) {\n    console.error('Error checking license. Expiry timestamp not found or invalid!');\n    return LicenseStatus.Invalid;\n  }\n\n  if (license.licensingModel === 'perpetual' || isProduction) {\n    const pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);\n\n    if (Number.isNaN(pkgTimestamp)) {\n      throw new Error('MUI: The release information is invalid. Not able to validate license.');\n    }\n\n    if (license.expiryTimestamp < pkgTimestamp) {\n      return LicenseStatus.Expired;\n    }\n  } else if (license.licensingModel === 'subscription') {\n    if (license.expiryTimestamp < new Date().getTime()) {\n      return LicenseStatus.Expired;\n    }\n  }\n\n  if (license.scope == null || !LICENSE_SCOPES.includes(license.scope)) {\n    console.error('Error checking license. scope not found or invalid!');\n    return LicenseStatus.Invalid;\n  }\n\n  if (!acceptedScopes.includes(license.scope)) {\n    return LicenseStatus.OutOfScope;\n  }\n\n  return LicenseStatus.Valid;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}