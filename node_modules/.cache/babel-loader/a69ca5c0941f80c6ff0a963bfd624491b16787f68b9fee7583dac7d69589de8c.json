{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useGridApiEventHandler, getDataGridUtilityClass, useGridLogger } from '@mui/x-data-grid';\nimport { gridColumnReorderDragColSelector } from './columnReorderSelector';\nvar CURSOR_MOVE_DIRECTION_LEFT = 'left';\nvar CURSOR_MOVE_DIRECTION_RIGHT = 'right';\nvar getCursorMoveDirectionX = function getCursorMoveDirectionX(currentCoordinates, nextCoordinates) {\n  return currentCoordinates.x <= nextCoordinates.x ? CURSOR_MOVE_DIRECTION_RIGHT : CURSOR_MOVE_DIRECTION_LEFT;\n};\nvar hasCursorPositionChanged = function hasCursorPositionChanged(currentCoordinates, nextCoordinates) {\n  return currentCoordinates.x !== nextCoordinates.x || currentCoordinates.y !== nextCoordinates.y;\n};\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    columnHeaderDragging: ['columnHeader--dragging']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nexport var columnReorderStateInitializer = function columnReorderStateInitializer(state) {\n  return _extends({}, state, {\n    columnReorder: {\n      dragCol: ''\n    }\n  });\n};\n/**\n * @requires useGridColumns (method)\n */\n\nexport var useGridColumnReorder = function useGridColumnReorder(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useGridColumnReorder');\n  var dragColNode = React.useRef(null);\n  var cursorPosition = React.useRef({\n    x: 0,\n    y: 0\n  });\n  var originColumnIndex = React.useRef(null);\n  var forbiddenIndexes = React.useRef({});\n  var removeDnDStylesTimeout = React.useRef();\n  var ownerState = {\n    classes: props.classes\n  };\n  var classes = useUtilityClasses(ownerState);\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(removeDnDStylesTimeout.current);\n    };\n  }, []);\n  var handleDragStart = React.useCallback(function (params, event) {\n    if (props.disableColumnReorder || params.colDef.disableReorder) {\n      return;\n    }\n    logger.debug(\"Start dragging col \".concat(params.field)); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    dragColNode.current = event.currentTarget;\n    dragColNode.current.classList.add(classes.columnHeaderDragging);\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        columnReorder: _extends({}, state.columnReorder, {\n          dragCol: params.field\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n    removeDnDStylesTimeout.current = setTimeout(function () {\n      dragColNode.current.classList.remove(classes.columnHeaderDragging);\n    });\n    originColumnIndex.current = apiRef.current.getColumnIndex(params.field, false);\n    var draggingColumnGroupPath = apiRef.current.unstable_getColumnGroupPath(params.field);\n    var columnIndex = originColumnIndex.current;\n    var allColumns = apiRef.current.getAllColumns();\n    var groupsLookup = apiRef.current.unstable_getAllGroupDetails(); // The limitingGroupId is the id of the group from which the dragged column should not escape\n\n    var limitingGroupId = null;\n    draggingColumnGroupPath.forEach(function (groupId) {\n      var _groupsLookup$groupId;\n      if (!((_groupsLookup$groupId = groupsLookup[groupId]) != null && _groupsLookup$groupId.freeReordering)) {\n        var _allColumns$groupPath, _allColumns$groupPath2;\n\n        // Only consider group that are made of more than one column\n        if (columnIndex > 0 && (_allColumns$groupPath = allColumns[columnIndex - 1].groupPath) != null && _allColumns$groupPath.includes(groupId)) {\n          limitingGroupId = groupId;\n        } else if (columnIndex + 1 < allColumns.length && (_allColumns$groupPath2 = allColumns[columnIndex + 1].groupPath) != null && _allColumns$groupPath2.includes(groupId)) {\n          limitingGroupId = groupId;\n        }\n      }\n    });\n    forbiddenIndexes.current = {};\n    var _loop = function _loop(indexToForbid) {\n      var leftIndex = indexToForbid <= columnIndex ? indexToForbid - 1 : indexToForbid;\n      var rightIndex = indexToForbid < columnIndex ? indexToForbid : indexToForbid + 1;\n      if (limitingGroupId !== null) {\n        // verify this indexToForbid will be linked to the limiting group. Otherwise forbid it\n        var allowIndex = false;\n        if (leftIndex >= 0 && (_allColumns$leftIndex = allColumns[leftIndex].groupPath) != null && _allColumns$leftIndex.includes(limitingGroupId)) {\n          allowIndex = true;\n        } else if (rightIndex < allColumns.length && (_allColumns$rightInde = allColumns[rightIndex].groupPath) != null && _allColumns$rightInde.includes(limitingGroupId)) {\n          allowIndex = true;\n        }\n        if (!allowIndex) {\n          forbiddenIndexes.current[indexToForbid] = true;\n        }\n      } // Verify we are not splitting another group\n\n      if (leftIndex >= 0 && rightIndex < allColumns.length) {\n        (_allColumns$rightInde2 = allColumns[rightIndex]) == null ? void 0 : (_allColumns$rightInde3 = _allColumns$rightInde2.groupPath) == null ? void 0 : _allColumns$rightInde3.forEach(function (groupId) {\n          var _allColumns$leftIndex2;\n          if ((_allColumns$leftIndex2 = allColumns[leftIndex].groupPath) != null && _allColumns$leftIndex2.includes(groupId)) {\n            if (!draggingColumnGroupPath.includes(groupId)) {\n              var _groupsLookup$groupId2;\n\n              // moving here split the group groupId in two distincts chunks\n              if (!((_groupsLookup$groupId2 = groupsLookup[groupId]) != null && _groupsLookup$groupId2.freeReordering)) {\n                forbiddenIndexes.current[indexToForbid] = true;\n              }\n            }\n          }\n        });\n      }\n    };\n    for (var indexToForbid = 0; indexToForbid < allColumns.length; indexToForbid += 1) {\n      var _allColumns$leftIndex, _allColumns$rightInde;\n      var _allColumns$rightInde2, _allColumns$rightInde3;\n      _loop(indexToForbid);\n    }\n  }, [props.disableColumnReorder, classes.columnHeaderDragging, logger, apiRef]);\n  var handleDragEnter = React.useCallback(function (params, event) {\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n  }, []);\n  var handleDragOver = React.useCallback(function (params, event) {\n    var dragColField = gridColumnReorderDragColSelector(apiRef);\n    if (!dragColField) {\n      return;\n    }\n    logger.debug(\"Dragging over col \".concat(params.field));\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    var coordinates = {\n      x: event.clientX,\n      y: event.clientY\n    };\n    if (params.field !== dragColField && hasCursorPositionChanged(cursorPosition.current, coordinates)) {\n      var targetColIndex = apiRef.current.getColumnIndex(params.field, false);\n      var targetColVisibleIndex = apiRef.current.getColumnIndex(params.field, true);\n      var targetCol = apiRef.current.getColumn(params.field);\n      var dragColIndex = apiRef.current.getColumnIndex(dragColField, false);\n      var visibleColumns = apiRef.current.getVisibleColumns();\n      var allColumns = apiRef.current.getAllColumns();\n      var cursorMoveDirectionX = getCursorMoveDirectionX(cursorPosition.current, coordinates);\n      var hasMovedLeft = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_LEFT && targetColIndex < dragColIndex;\n      var hasMovedRight = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_RIGHT && dragColIndex < targetColIndex;\n      if (hasMovedLeft || hasMovedRight) {\n        var canBeReordered;\n        var indexOffsetInHiddenColumns = 0;\n        if (!targetCol.disableReorder) {\n          canBeReordered = true;\n        } else if (hasMovedLeft) {\n          canBeReordered = targetColVisibleIndex > 0 && !visibleColumns[targetColVisibleIndex - 1].disableReorder;\n        } else {\n          canBeReordered = targetColVisibleIndex < visibleColumns.length - 1 && !visibleColumns[targetColVisibleIndex + 1].disableReorder;\n        }\n        if (forbiddenIndexes.current[targetColIndex]) {\n          var nextVisibleColumnField;\n          var indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n          if (hasMovedLeft) {\n            nextVisibleColumnField = targetColVisibleIndex > 0 ? visibleColumns[targetColVisibleIndex - 1].field : null;\n            while (indexWithOffset > 0 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns -= 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          } else {\n            nextVisibleColumnField = targetColVisibleIndex + 1 < visibleColumns.length ? visibleColumns[targetColVisibleIndex + 1].field : null;\n            while (indexWithOffset < allColumns.length - 1 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns += 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          }\n          if (forbiddenIndexes.current[indexWithOffset] || allColumns[indexWithOffset].field === nextVisibleColumnField) {\n            // If we ended up on a visible column, or a forbidden one, we can not do the reorder\n            canBeReordered = false;\n          }\n        }\n        var canBeReorderedProcessed = apiRef.current.unstable_applyPipeProcessors('canBeReordered', canBeReordered, {\n          targetIndex: targetColVisibleIndex\n        });\n        if (canBeReorderedProcessed) {\n          apiRef.current.setColumnIndex(dragColField, targetColIndex + indexOffsetInHiddenColumns);\n        }\n      }\n      cursorPosition.current = coordinates;\n    }\n  }, [apiRef, logger]);\n  var handleDragEnd = React.useCallback(function (params, event) {\n    var dragColField = gridColumnReorderDragColSelector(apiRef);\n    if (props.disableColumnReorder || !dragColField) {\n      return;\n    }\n    logger.debug('End dragging col');\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    clearTimeout(removeDnDStylesTimeout.current);\n    dragColNode.current = null; // Check if the column was dropped outside the grid.\n\n    if (event.dataTransfer.dropEffect === 'none' && !props.keepColumnPositionIfDraggedOutside) {\n      // Accessing params.field may contain the wrong field as header elements are reused\n      apiRef.current.setColumnIndex(dragColField, originColumnIndex.current);\n    }\n    originColumnIndex.current = null;\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        columnReorder: _extends({}, state.columnReorder, {\n          dragCol: ''\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [props.disableColumnReorder, props.keepColumnPositionIfDraggedOutside, logger, apiRef]);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleDragStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragOver', handleDragOver);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleDragEnd);\n  useGridApiEventHandler(apiRef, 'cellDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'cellDragOver', handleDragOver);\n};","map":{"version":3,"names":["_extends","React","unstable_composeClasses","composeClasses","useGridApiEventHandler","getDataGridUtilityClass","useGridLogger","gridColumnReorderDragColSelector","CURSOR_MOVE_DIRECTION_LEFT","CURSOR_MOVE_DIRECTION_RIGHT","getCursorMoveDirectionX","currentCoordinates","nextCoordinates","x","hasCursorPositionChanged","y","useUtilityClasses","ownerState","classes","slots","columnHeaderDragging","columnReorderStateInitializer","state","columnReorder","dragCol","useGridColumnReorder","apiRef","props","logger","dragColNode","useRef","cursorPosition","originColumnIndex","forbiddenIndexes","removeDnDStylesTimeout","useEffect","clearTimeout","current","handleDragStart","useCallback","params","event","disableColumnReorder","colDef","disableReorder","debug","field","stopPropagation","currentTarget","classList","add","setState","forceUpdate","setTimeout","remove","getColumnIndex","draggingColumnGroupPath","unstable_getColumnGroupPath","columnIndex","allColumns","getAllColumns","groupsLookup","unstable_getAllGroupDetails","limitingGroupId","forEach","groupId","_groupsLookup$groupId","freeReordering","_allColumns$groupPath","_allColumns$groupPath2","groupPath","includes","length","indexToForbid","leftIndex","rightIndex","allowIndex","_allColumns$leftIndex","_allColumns$rightInde","_allColumns$rightInde2","_allColumns$rightInde3","_allColumns$leftIndex2","_groupsLookup$groupId2","handleDragEnter","preventDefault","handleDragOver","dragColField","coordinates","clientX","clientY","targetColIndex","targetColVisibleIndex","targetCol","getColumn","dragColIndex","visibleColumns","getVisibleColumns","cursorMoveDirectionX","hasMovedLeft","hasMovedRight","canBeReordered","indexOffsetInHiddenColumns","nextVisibleColumnField","indexWithOffset","canBeReorderedProcessed","unstable_applyPipeProcessors","targetIndex","setColumnIndex","handleDragEnd","dataTransfer","dropEffect","keepColumnPositionIfDraggedOutside"],"sources":["/workspaces/Backwoodaroma/node_modules/@mui/x-data-grid-pro/hooks/features/columnReorder/useGridColumnReorder.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useGridApiEventHandler, getDataGridUtilityClass, useGridLogger } from '@mui/x-data-grid';\nimport { gridColumnReorderDragColSelector } from './columnReorderSelector';\nconst CURSOR_MOVE_DIRECTION_LEFT = 'left';\nconst CURSOR_MOVE_DIRECTION_RIGHT = 'right';\n\nconst getCursorMoveDirectionX = (currentCoordinates, nextCoordinates) => {\n  return currentCoordinates.x <= nextCoordinates.x ? CURSOR_MOVE_DIRECTION_RIGHT : CURSOR_MOVE_DIRECTION_LEFT;\n};\n\nconst hasCursorPositionChanged = (currentCoordinates, nextCoordinates) => currentCoordinates.x !== nextCoordinates.x || currentCoordinates.y !== nextCoordinates.y;\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    columnHeaderDragging: ['columnHeader--dragging']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nexport const columnReorderStateInitializer = state => _extends({}, state, {\n  columnReorder: {\n    dragCol: ''\n  }\n});\n/**\n * @requires useGridColumns (method)\n */\n\nexport const useGridColumnReorder = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnReorder');\n  const dragColNode = React.useRef(null);\n  const cursorPosition = React.useRef({\n    x: 0,\n    y: 0\n  });\n  const originColumnIndex = React.useRef(null);\n  const forbiddenIndexes = React.useRef({});\n  const removeDnDStylesTimeout = React.useRef();\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(removeDnDStylesTimeout.current);\n    };\n  }, []);\n  const handleDragStart = React.useCallback((params, event) => {\n    if (props.disableColumnReorder || params.colDef.disableReorder) {\n      return;\n    }\n\n    logger.debug(`Start dragging col ${params.field}`); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    dragColNode.current = event.currentTarget;\n    dragColNode.current.classList.add(classes.columnHeaderDragging);\n    apiRef.current.setState(state => _extends({}, state, {\n      columnReorder: _extends({}, state.columnReorder, {\n        dragCol: params.field\n      })\n    }));\n    apiRef.current.forceUpdate();\n    removeDnDStylesTimeout.current = setTimeout(() => {\n      dragColNode.current.classList.remove(classes.columnHeaderDragging);\n    });\n    originColumnIndex.current = apiRef.current.getColumnIndex(params.field, false);\n    const draggingColumnGroupPath = apiRef.current.unstable_getColumnGroupPath(params.field);\n    const columnIndex = originColumnIndex.current;\n    const allColumns = apiRef.current.getAllColumns();\n    const groupsLookup = apiRef.current.unstable_getAllGroupDetails(); // The limitingGroupId is the id of the group from which the dragged column should not escape\n\n    let limitingGroupId = null;\n    draggingColumnGroupPath.forEach(groupId => {\n      var _groupsLookup$groupId;\n\n      if (!((_groupsLookup$groupId = groupsLookup[groupId]) != null && _groupsLookup$groupId.freeReordering)) {\n        var _allColumns$groupPath, _allColumns$groupPath2;\n\n        // Only consider group that are made of more than one column\n        if (columnIndex > 0 && (_allColumns$groupPath = allColumns[columnIndex - 1].groupPath) != null && _allColumns$groupPath.includes(groupId)) {\n          limitingGroupId = groupId;\n        } else if (columnIndex + 1 < allColumns.length && (_allColumns$groupPath2 = allColumns[columnIndex + 1].groupPath) != null && _allColumns$groupPath2.includes(groupId)) {\n          limitingGroupId = groupId;\n        }\n      }\n    });\n    forbiddenIndexes.current = {};\n\n    for (let indexToForbid = 0; indexToForbid < allColumns.length; indexToForbid += 1) {\n      const leftIndex = indexToForbid <= columnIndex ? indexToForbid - 1 : indexToForbid;\n      const rightIndex = indexToForbid < columnIndex ? indexToForbid : indexToForbid + 1;\n\n      if (limitingGroupId !== null) {\n        var _allColumns$leftIndex, _allColumns$rightInde;\n\n        // verify this indexToForbid will be linked to the limiting group. Otherwise forbid it\n        let allowIndex = false;\n\n        if (leftIndex >= 0 && (_allColumns$leftIndex = allColumns[leftIndex].groupPath) != null && _allColumns$leftIndex.includes(limitingGroupId)) {\n          allowIndex = true;\n        } else if (rightIndex < allColumns.length && (_allColumns$rightInde = allColumns[rightIndex].groupPath) != null && _allColumns$rightInde.includes(limitingGroupId)) {\n          allowIndex = true;\n        }\n\n        if (!allowIndex) {\n          forbiddenIndexes.current[indexToForbid] = true;\n        }\n      } // Verify we are not splitting another group\n\n\n      if (leftIndex >= 0 && rightIndex < allColumns.length) {\n        var _allColumns$rightInde2, _allColumns$rightInde3;\n\n        (_allColumns$rightInde2 = allColumns[rightIndex]) == null ? void 0 : (_allColumns$rightInde3 = _allColumns$rightInde2.groupPath) == null ? void 0 : _allColumns$rightInde3.forEach(groupId => {\n          var _allColumns$leftIndex2;\n\n          if ((_allColumns$leftIndex2 = allColumns[leftIndex].groupPath) != null && _allColumns$leftIndex2.includes(groupId)) {\n            if (!draggingColumnGroupPath.includes(groupId)) {\n              var _groupsLookup$groupId2;\n\n              // moving here split the group groupId in two distincts chunks\n              if (!((_groupsLookup$groupId2 = groupsLookup[groupId]) != null && _groupsLookup$groupId2.freeReordering)) {\n                forbiddenIndexes.current[indexToForbid] = true;\n              }\n            }\n          }\n        });\n      }\n    }\n  }, [props.disableColumnReorder, classes.columnHeaderDragging, logger, apiRef]);\n  const handleDragEnter = React.useCallback((params, event) => {\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n  }, []);\n  const handleDragOver = React.useCallback((params, event) => {\n    const dragColField = gridColumnReorderDragColSelector(apiRef);\n\n    if (!dragColField) {\n      return;\n    }\n\n    logger.debug(`Dragging over col ${params.field}`);\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    const coordinates = {\n      x: event.clientX,\n      y: event.clientY\n    };\n\n    if (params.field !== dragColField && hasCursorPositionChanged(cursorPosition.current, coordinates)) {\n      const targetColIndex = apiRef.current.getColumnIndex(params.field, false);\n      const targetColVisibleIndex = apiRef.current.getColumnIndex(params.field, true);\n      const targetCol = apiRef.current.getColumn(params.field);\n      const dragColIndex = apiRef.current.getColumnIndex(dragColField, false);\n      const visibleColumns = apiRef.current.getVisibleColumns();\n      const allColumns = apiRef.current.getAllColumns();\n      const cursorMoveDirectionX = getCursorMoveDirectionX(cursorPosition.current, coordinates);\n      const hasMovedLeft = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_LEFT && targetColIndex < dragColIndex;\n      const hasMovedRight = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_RIGHT && dragColIndex < targetColIndex;\n\n      if (hasMovedLeft || hasMovedRight) {\n        let canBeReordered;\n        let indexOffsetInHiddenColumns = 0;\n\n        if (!targetCol.disableReorder) {\n          canBeReordered = true;\n        } else if (hasMovedLeft) {\n          canBeReordered = targetColVisibleIndex > 0 && !visibleColumns[targetColVisibleIndex - 1].disableReorder;\n        } else {\n          canBeReordered = targetColVisibleIndex < visibleColumns.length - 1 && !visibleColumns[targetColVisibleIndex + 1].disableReorder;\n        }\n\n        if (forbiddenIndexes.current[targetColIndex]) {\n          let nextVisibleColumnField;\n          let indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n\n          if (hasMovedLeft) {\n            nextVisibleColumnField = targetColVisibleIndex > 0 ? visibleColumns[targetColVisibleIndex - 1].field : null;\n\n            while (indexWithOffset > 0 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns -= 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          } else {\n            nextVisibleColumnField = targetColVisibleIndex + 1 < visibleColumns.length ? visibleColumns[targetColVisibleIndex + 1].field : null;\n\n            while (indexWithOffset < allColumns.length - 1 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns += 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          }\n\n          if (forbiddenIndexes.current[indexWithOffset] || allColumns[indexWithOffset].field === nextVisibleColumnField) {\n            // If we ended up on a visible column, or a forbidden one, we can not do the reorder\n            canBeReordered = false;\n          }\n        }\n\n        const canBeReorderedProcessed = apiRef.current.unstable_applyPipeProcessors('canBeReordered', canBeReordered, {\n          targetIndex: targetColVisibleIndex\n        });\n\n        if (canBeReorderedProcessed) {\n          apiRef.current.setColumnIndex(dragColField, targetColIndex + indexOffsetInHiddenColumns);\n        }\n      }\n\n      cursorPosition.current = coordinates;\n    }\n  }, [apiRef, logger]);\n  const handleDragEnd = React.useCallback((params, event) => {\n    const dragColField = gridColumnReorderDragColSelector(apiRef);\n\n    if (props.disableColumnReorder || !dragColField) {\n      return;\n    }\n\n    logger.debug('End dragging col');\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    clearTimeout(removeDnDStylesTimeout.current);\n    dragColNode.current = null; // Check if the column was dropped outside the grid.\n\n    if (event.dataTransfer.dropEffect === 'none' && !props.keepColumnPositionIfDraggedOutside) {\n      // Accessing params.field may contain the wrong field as header elements are reused\n      apiRef.current.setColumnIndex(dragColField, originColumnIndex.current);\n    }\n\n    originColumnIndex.current = null;\n    apiRef.current.setState(state => _extends({}, state, {\n      columnReorder: _extends({}, state.columnReorder, {\n        dragCol: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [props.disableColumnReorder, props.keepColumnPositionIfDraggedOutside, logger, apiRef]);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleDragStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragOver', handleDragOver);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleDragEnd);\n  useGridApiEventHandler(apiRef, 'cellDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'cellDragOver', handleDragOver);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}