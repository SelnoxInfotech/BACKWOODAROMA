{"ast":null,"code":"import _slicedToArray from \"/workspaces/Backwoodaroma/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useGridLogger, useGridApiEventHandler, getDataGridUtilityClass, useGridSelector, gridSortModelSelector, gridRowTreeDepthSelector, useGridApiOptionHandler, gridEditRowsStateSelector } from '@mui/x-data-grid';\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    rowDragging: ['row--dragging']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n/**\n * Only available in DataGridPro\n * @requires useGridRows (method)\n */\n\nexport var useGridRowReorder = function useGridRowReorder(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useGridRowReorder');\n  var sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  var treeDepth = useGridSelector(apiRef, gridRowTreeDepthSelector);\n  var dragRowNode = React.useRef(null);\n  var originRowIndex = React.useRef(null);\n  var removeDnDStylesTimeout = React.useRef();\n  var ownerState = {\n    classes: props.classes\n  };\n  var classes = useUtilityClasses(ownerState);\n  var _React$useState = React.useState(''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    dragRowId = _React$useState2[0],\n    setDragRowId = _React$useState2[1];\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(removeDnDStylesTimeout.current);\n    };\n  }, []); // TODO: remove sortModel check once row reorder is sorting compatible\n  // remove treeDepth once row reorder is tree compatible\n\n  var isRowReorderDisabled = React.useMemo(function () {\n    return !props.rowReordering || !!sortModel.length || treeDepth !== 1;\n  }, [props.rowReordering, sortModel, treeDepth]);\n  var handleDragStart = React.useCallback(function (params, event) {\n    // Call the gridEditRowsStateSelector directly to avoid infnite loop\n    var editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    if (isRowReorderDisabled || Object.keys(editRowsState).length !== 0) {\n      return;\n    }\n    logger.debug(\"Start dragging row \".concat(params.id)); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    dragRowNode.current = event.currentTarget;\n    dragRowNode.current.classList.add(classes.rowDragging);\n    setDragRowId(params.id);\n    removeDnDStylesTimeout.current = setTimeout(function () {\n      dragRowNode.current.classList.remove(classes.rowDragging);\n    });\n    originRowIndex.current = apiRef.current.getRowIndex(params.id);\n  }, [isRowReorderDisabled, classes.rowDragging, logger, apiRef]);\n  var handleDragOver = React.useCallback(function (params, event) {\n    var _apiRef$current$getRo;\n    if (dragRowId === '') {\n      return;\n    }\n    if ((_apiRef$current$getRo = apiRef.current.getRowNode(params.id)) != null && _apiRef$current$getRo.isPinned) {\n      return;\n    }\n    logger.debug(\"Dragging over row \".concat(params.id));\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    if (params.id !== dragRowId) {\n      var targetRowIndex = apiRef.current.getRowIndex(params.id);\n      apiRef.current.setRowIndex(dragRowId, targetRowIndex);\n    }\n  }, [apiRef, logger, dragRowId]);\n  var handleDragEnd = React.useCallback(function (params, event) {\n    // Call the gridEditRowsStateSelector directly to avoid infnite loop\n    var editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    if (dragRowId === '' || isRowReorderDisabled || Object.keys(editRowsState).length !== 0) {\n      return;\n    }\n    logger.debug('End dragging row');\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    clearTimeout(removeDnDStylesTimeout.current);\n    dragRowNode.current = null; // Check if the row was dropped outside the grid.\n\n    if (event.dataTransfer.dropEffect === 'none') {\n      // Accessing params.field may contain the wrong field as header elements are reused\n      apiRef.current.setRowIndex(dragRowId, originRowIndex.current);\n      originRowIndex.current = null;\n    } else {\n      // Emit the rowOrderChange event only once when the reordering stops.\n      var rowOrderChangeParams = {\n        row: apiRef.current.getRow(dragRowId),\n        targetIndex: apiRef.current.getRowIndex(params.id),\n        oldIndex: originRowIndex.current\n      };\n      apiRef.current.publishEvent('rowOrderChange', rowOrderChangeParams);\n    }\n    setDragRowId('');\n  }, [isRowReorderDisabled, logger, apiRef, dragRowId]);\n  useGridApiEventHandler(apiRef, 'rowDragStart', handleDragStart);\n  useGridApiEventHandler(apiRef, 'rowDragOver', handleDragOver);\n  useGridApiEventHandler(apiRef, 'rowDragEnd', handleDragEnd);\n  useGridApiEventHandler(apiRef, 'cellDragOver', handleDragOver);\n  useGridApiOptionHandler(apiRef, 'rowOrderChange', props.onRowOrderChange);\n};","map":{"version":3,"names":["React","unstable_composeClasses","composeClasses","useGridLogger","useGridApiEventHandler","getDataGridUtilityClass","useGridSelector","gridSortModelSelector","gridRowTreeDepthSelector","useGridApiOptionHandler","gridEditRowsStateSelector","useUtilityClasses","ownerState","classes","slots","rowDragging","useGridRowReorder","apiRef","props","logger","sortModel","treeDepth","dragRowNode","useRef","originRowIndex","removeDnDStylesTimeout","useState","dragRowId","setDragRowId","useEffect","clearTimeout","current","isRowReorderDisabled","useMemo","rowReordering","length","handleDragStart","useCallback","params","event","editRowsState","state","Object","keys","debug","id","stopPropagation","currentTarget","classList","add","setTimeout","remove","getRowIndex","handleDragOver","_apiRef$current$getRo","getRowNode","isPinned","preventDefault","targetRowIndex","setRowIndex","handleDragEnd","dataTransfer","dropEffect","rowOrderChangeParams","row","getRow","targetIndex","oldIndex","publishEvent","onRowOrderChange"],"sources":["/workspaces/Backwoodaroma/node_modules/@mui/x-data-grid-pro/hooks/features/rowReorder/useGridRowReorder.js"],"sourcesContent":["import * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useGridLogger, useGridApiEventHandler, getDataGridUtilityClass, useGridSelector, gridSortModelSelector, gridRowTreeDepthSelector, useGridApiOptionHandler, gridEditRowsStateSelector } from '@mui/x-data-grid';\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    rowDragging: ['row--dragging']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n/**\n * Only available in DataGridPro\n * @requires useGridRows (method)\n */\n\n\nexport const useGridRowReorder = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridRowReorder');\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowTreeDepthSelector);\n  const dragRowNode = React.useRef(null);\n  const originRowIndex = React.useRef(null);\n  const removeDnDStylesTimeout = React.useRef();\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const [dragRowId, setDragRowId] = React.useState('');\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(removeDnDStylesTimeout.current);\n    };\n  }, []); // TODO: remove sortModel check once row reorder is sorting compatible\n  // remove treeDepth once row reorder is tree compatible\n\n  const isRowReorderDisabled = React.useMemo(() => {\n    return !props.rowReordering || !!sortModel.length || treeDepth !== 1;\n  }, [props.rowReordering, sortModel, treeDepth]);\n  const handleDragStart = React.useCallback((params, event) => {\n    // Call the gridEditRowsStateSelector directly to avoid infnite loop\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (isRowReorderDisabled || Object.keys(editRowsState).length !== 0) {\n      return;\n    }\n\n    logger.debug(`Start dragging row ${params.id}`); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    dragRowNode.current = event.currentTarget;\n    dragRowNode.current.classList.add(classes.rowDragging);\n    setDragRowId(params.id);\n    removeDnDStylesTimeout.current = setTimeout(() => {\n      dragRowNode.current.classList.remove(classes.rowDragging);\n    });\n    originRowIndex.current = apiRef.current.getRowIndex(params.id);\n  }, [isRowReorderDisabled, classes.rowDragging, logger, apiRef]);\n  const handleDragOver = React.useCallback((params, event) => {\n    var _apiRef$current$getRo;\n\n    if (dragRowId === '') {\n      return;\n    }\n\n    if ((_apiRef$current$getRo = apiRef.current.getRowNode(params.id)) != null && _apiRef$current$getRo.isPinned) {\n      return;\n    }\n\n    logger.debug(`Dragging over row ${params.id}`);\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n\n    if (params.id !== dragRowId) {\n      const targetRowIndex = apiRef.current.getRowIndex(params.id);\n      apiRef.current.setRowIndex(dragRowId, targetRowIndex);\n    }\n  }, [apiRef, logger, dragRowId]);\n  const handleDragEnd = React.useCallback((params, event) => {\n    // Call the gridEditRowsStateSelector directly to avoid infnite loop\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (dragRowId === '' || isRowReorderDisabled || Object.keys(editRowsState).length !== 0) {\n      return;\n    }\n\n    logger.debug('End dragging row');\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    clearTimeout(removeDnDStylesTimeout.current);\n    dragRowNode.current = null; // Check if the row was dropped outside the grid.\n\n    if (event.dataTransfer.dropEffect === 'none') {\n      // Accessing params.field may contain the wrong field as header elements are reused\n      apiRef.current.setRowIndex(dragRowId, originRowIndex.current);\n      originRowIndex.current = null;\n    } else {\n      // Emit the rowOrderChange event only once when the reordering stops.\n      const rowOrderChangeParams = {\n        row: apiRef.current.getRow(dragRowId),\n        targetIndex: apiRef.current.getRowIndex(params.id),\n        oldIndex: originRowIndex.current\n      };\n      apiRef.current.publishEvent('rowOrderChange', rowOrderChangeParams);\n    }\n\n    setDragRowId('');\n  }, [isRowReorderDisabled, logger, apiRef, dragRowId]);\n  useGridApiEventHandler(apiRef, 'rowDragStart', handleDragStart);\n  useGridApiEventHandler(apiRef, 'rowDragOver', handleDragOver);\n  useGridApiEventHandler(apiRef, 'rowDragEnd', handleDragEnd);\n  useGridApiEventHandler(apiRef, 'cellDragOver', handleDragOver);\n  useGridApiOptionHandler(apiRef, 'rowOrderChange', props.onRowOrderChange);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}