{"ast":null,"code":"import * as React from 'react';\nimport { useGridSelector, useGridApiEventHandler, useGridApiOptionHandler, gridVisibleColumnDefinitionsSelector, gridRowsMetaSelector, GridFeatureModeConstant } from '@mui/x-data-grid';\nimport { useGridVisibleRows } from '@mui/x-data-grid/internals';\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridDimensions (method) - can be after\n * @requires useGridScroll (method\n */\nexport var useGridInfiniteLoader = function useGridInfiniteLoader(apiRef, props) {\n  var visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  var currentPage = useGridVisibleRows(apiRef, props);\n  var rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  var contentHeight = Math.max(rowsMeta.currentPageTotalHeight, 1);\n  var isInScrollBottomArea = React.useRef(false);\n  var handleRowsScrollEnd = React.useCallback(function (scrollPosition) {\n    var dimensions = apiRef.current.getRootDimensions(); // Prevent the infite loading working in combination with lazy loading\n\n    if (!dimensions || props.rowsLoadingMode !== GridFeatureModeConstant.client) {\n      return;\n    }\n    var scrollPositionBottom = scrollPosition.top + dimensions.viewportOuterSize.height;\n    var viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    if (scrollPositionBottom < contentHeight - props.scrollEndThreshold) {\n      isInScrollBottomArea.current = false;\n    }\n    if (scrollPositionBottom >= contentHeight - props.scrollEndThreshold && !isInScrollBottomArea.current) {\n      var rowScrollEndParam = {\n        visibleColumns: visibleColumns,\n        viewportPageSize: viewportPageSize,\n        virtualRowsCount: currentPage.rows.length\n      };\n      apiRef.current.publishEvent('rowsScrollEnd', rowScrollEndParam);\n      isInScrollBottomArea.current = true;\n    }\n  }, [contentHeight, props.scrollEndThreshold, props.rowsLoadingMode, visibleColumns, apiRef, currentPage.rows.length]);\n  var handleGridScroll = React.useCallback(function (_ref) {\n    var left = _ref.left,\n      top = _ref.top;\n    handleRowsScrollEnd({\n      left: left,\n      top: top\n    });\n  }, [handleRowsScrollEnd]);\n  useGridApiEventHandler(apiRef, 'rowsScroll', handleGridScroll);\n  useGridApiOptionHandler(apiRef, 'rowsScrollEnd', props.onRowsScrollEnd);\n};","map":{"version":3,"names":["React","useGridSelector","useGridApiEventHandler","useGridApiOptionHandler","gridVisibleColumnDefinitionsSelector","gridRowsMetaSelector","GridFeatureModeConstant","useGridVisibleRows","useGridInfiniteLoader","apiRef","props","visibleColumns","currentPage","rowsMeta","contentHeight","Math","max","currentPageTotalHeight","isInScrollBottomArea","useRef","handleRowsScrollEnd","useCallback","scrollPosition","dimensions","current","getRootDimensions","rowsLoadingMode","client","scrollPositionBottom","top","viewportOuterSize","height","viewportPageSize","unstable_getViewportPageSize","scrollEndThreshold","rowScrollEndParam","virtualRowsCount","rows","length","publishEvent","handleGridScroll","left","onRowsScrollEnd"],"sources":["/workspaces/Backwoodaroma/node_modules/@mui/x-data-grid-pro/hooks/features/infiniteLoader/useGridInfiniteLoader.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridSelector, useGridApiEventHandler, useGridApiOptionHandler, gridVisibleColumnDefinitionsSelector, gridRowsMetaSelector, GridFeatureModeConstant } from '@mui/x-data-grid';\nimport { useGridVisibleRows } from '@mui/x-data-grid/internals';\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridDimensions (method) - can be after\n * @requires useGridScroll (method\n */\nexport const useGridInfiniteLoader = (apiRef, props) => {\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const contentHeight = Math.max(rowsMeta.currentPageTotalHeight, 1);\n  const isInScrollBottomArea = React.useRef(false);\n  const handleRowsScrollEnd = React.useCallback(scrollPosition => {\n    const dimensions = apiRef.current.getRootDimensions(); // Prevent the infite loading working in combination with lazy loading\n\n    if (!dimensions || props.rowsLoadingMode !== GridFeatureModeConstant.client) {\n      return;\n    }\n\n    const scrollPositionBottom = scrollPosition.top + dimensions.viewportOuterSize.height;\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n\n    if (scrollPositionBottom < contentHeight - props.scrollEndThreshold) {\n      isInScrollBottomArea.current = false;\n    }\n\n    if (scrollPositionBottom >= contentHeight - props.scrollEndThreshold && !isInScrollBottomArea.current) {\n      const rowScrollEndParam = {\n        visibleColumns,\n        viewportPageSize,\n        virtualRowsCount: currentPage.rows.length\n      };\n      apiRef.current.publishEvent('rowsScrollEnd', rowScrollEndParam);\n      isInScrollBottomArea.current = true;\n    }\n  }, [contentHeight, props.scrollEndThreshold, props.rowsLoadingMode, visibleColumns, apiRef, currentPage.rows.length]);\n  const handleGridScroll = React.useCallback(({\n    left,\n    top\n  }) => {\n    handleRowsScrollEnd({\n      left,\n      top\n    });\n  }, [handleRowsScrollEnd]);\n  useGridApiEventHandler(apiRef, 'rowsScroll', handleGridScroll);\n  useGridApiOptionHandler(apiRef, 'rowsScrollEnd', props.onRowsScrollEnd);\n};"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,eAAe,EAAEC,sBAAsB,EAAEC,uBAAuB,EAAEC,oCAAoC,EAAEC,oBAAoB,EAAEC,uBAAuB,QAAQ,kBAAkB;AACxL,SAASC,kBAAkB,QAAQ,4BAA4B;;AAE/D;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAIC,MAAM,EAAEC,KAAK,EAAK;EACtD,IAAMC,cAAc,GAAGV,eAAe,CAACQ,MAAM,EAAEL,oCAAoC,CAAC;EACpF,IAAMQ,WAAW,GAAGL,kBAAkB,CAACE,MAAM,EAAEC,KAAK,CAAC;EACrD,IAAMG,QAAQ,GAAGZ,eAAe,CAACQ,MAAM,EAAEJ,oBAAoB,CAAC;EAC9D,IAAMS,aAAa,GAAGC,IAAI,CAACC,GAAG,CAACH,QAAQ,CAACI,sBAAsB,EAAE,CAAC,CAAC;EAClE,IAAMC,oBAAoB,GAAGlB,KAAK,CAACmB,MAAM,CAAC,KAAK,CAAC;EAChD,IAAMC,mBAAmB,GAAGpB,KAAK,CAACqB,WAAW,CAAC,UAAAC,cAAc,EAAI;IAC9D,IAAMC,UAAU,GAAGd,MAAM,CAACe,OAAO,CAACC,iBAAiB,EAAE,CAAC,CAAC;;IAEvD,IAAI,CAACF,UAAU,IAAIb,KAAK,CAACgB,eAAe,KAAKpB,uBAAuB,CAACqB,MAAM,EAAE;MAC3E;IACF;IAEA,IAAMC,oBAAoB,GAAGN,cAAc,CAACO,GAAG,GAAGN,UAAU,CAACO,iBAAiB,CAACC,MAAM;IACrF,IAAMC,gBAAgB,GAAGvB,MAAM,CAACe,OAAO,CAACS,4BAA4B,EAAE;IAEtE,IAAIL,oBAAoB,GAAGd,aAAa,GAAGJ,KAAK,CAACwB,kBAAkB,EAAE;MACnEhB,oBAAoB,CAACM,OAAO,GAAG,KAAK;IACtC;IAEA,IAAII,oBAAoB,IAAId,aAAa,GAAGJ,KAAK,CAACwB,kBAAkB,IAAI,CAAChB,oBAAoB,CAACM,OAAO,EAAE;MACrG,IAAMW,iBAAiB,GAAG;QACxBxB,cAAc,EAAdA,cAAc;QACdqB,gBAAgB,EAAhBA,gBAAgB;QAChBI,gBAAgB,EAAExB,WAAW,CAACyB,IAAI,CAACC;MACrC,CAAC;MACD7B,MAAM,CAACe,OAAO,CAACe,YAAY,CAAC,eAAe,EAAEJ,iBAAiB,CAAC;MAC/DjB,oBAAoB,CAACM,OAAO,GAAG,IAAI;IACrC;EACF,CAAC,EAAE,CAACV,aAAa,EAAEJ,KAAK,CAACwB,kBAAkB,EAAExB,KAAK,CAACgB,eAAe,EAAEf,cAAc,EAAEF,MAAM,EAAEG,WAAW,CAACyB,IAAI,CAACC,MAAM,CAAC,CAAC;EACrH,IAAME,gBAAgB,GAAGxC,KAAK,CAACqB,WAAW,CAAC,gBAGrC;IAAA,IAFJoB,IAAI,QAAJA,IAAI;MACJZ,GAAG,QAAHA,GAAG;IAEHT,mBAAmB,CAAC;MAClBqB,IAAI,EAAJA,IAAI;MACJZ,GAAG,EAAHA;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACT,mBAAmB,CAAC,CAAC;EACzBlB,sBAAsB,CAACO,MAAM,EAAE,YAAY,EAAE+B,gBAAgB,CAAC;EAC9DrC,uBAAuB,CAACM,MAAM,EAAE,eAAe,EAAEC,KAAK,CAACgC,eAAe,CAAC;AACzE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}