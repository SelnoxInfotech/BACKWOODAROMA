{"ast":null,"code":"export default function updateMutation(mutation, originalOffset, originalLength, newLength, prefixLength, suffixLength) {\n  // three cases we can reasonably adjust - disjoint mutations that\n  // happen later on where the offset will need to be changed,\n  // mutations that completely contain the new one where we can adjust\n  // the length, and mutations that occur partially within the new one.\n  var lengthDiff = newLength - originalLength;\n  var mutationAfterChange = originalOffset + originalLength <= mutation.offset;\n  if (mutationAfterChange) {\n    return Object.assign({}, mutation, {\n      offset: mutation.offset + lengthDiff\n    });\n  }\n  var mutationContainsChange = originalOffset >= mutation.offset && originalOffset + originalLength <= mutation.offset + mutation.length;\n  if (mutationContainsChange) {\n    return Object.assign({}, mutation, {\n      length: mutation.length + lengthDiff\n    });\n  }\n  var mutationWithinPrefixChange = mutation.offset >= originalOffset && mutation.offset + mutation.length <= originalOffset + originalLength && prefixLength > 0;\n  if (mutationWithinPrefixChange) {\n    return Object.assign({}, mutation, {\n      offset: mutation.offset + prefixLength\n    });\n  }\n  var mutationContainsPrefix = mutation.offset < originalOffset && mutation.offset + mutation.length <= originalOffset + originalLength && mutation.offset + mutation.length > originalOffset && prefixLength > 0;\n  if (mutationContainsPrefix) {\n    return [Object.assign({}, mutation, {\n      length: originalOffset - mutation.offset\n    }), Object.assign({}, mutation, {\n      offset: originalOffset + prefixLength,\n      length: mutation.offset - originalOffset + mutation.length\n    })];\n  }\n  var mutationContainsSuffix = mutation.offset >= originalOffset && mutation.offset + mutation.length > originalOffset + originalLength && originalOffset + originalLength > mutation.offset && suffixLength > 0;\n  if (mutationContainsSuffix) {\n    return [Object.assign({}, mutation, {\n      offset: mutation.offset + prefixLength,\n      length: originalOffset + originalLength - mutation.offset\n    }), Object.assign({}, mutation, {\n      offset: originalOffset + originalLength + prefixLength + suffixLength,\n      length: mutation.offset + mutation.length - (originalOffset + originalLength)\n    })];\n  }\n  return mutation;\n}","map":{"version":3,"names":["updateMutation","mutation","originalOffset","originalLength","newLength","prefixLength","suffixLength","lengthDiff","mutationAfterChange","offset","Object","assign","mutationContainsChange","length","mutationWithinPrefixChange","mutationContainsPrefix","mutationContainsSuffix"],"sources":["/workspaces/Backwoodaroma/node_modules/draft-convert/esm/util/updateMutation.js"],"sourcesContent":["export default function updateMutation(mutation, originalOffset, originalLength, newLength, prefixLength, suffixLength) {\n  // three cases we can reasonably adjust - disjoint mutations that\n  // happen later on where the offset will need to be changed,\n  // mutations that completely contain the new one where we can adjust\n  // the length, and mutations that occur partially within the new one.\n  var lengthDiff = newLength - originalLength;\n  var mutationAfterChange = originalOffset + originalLength <= mutation.offset;\n\n  if (mutationAfterChange) {\n    return Object.assign({}, mutation, {\n      offset: mutation.offset + lengthDiff\n    });\n  }\n\n  var mutationContainsChange = originalOffset >= mutation.offset && originalOffset + originalLength <= mutation.offset + mutation.length;\n\n  if (mutationContainsChange) {\n    return Object.assign({}, mutation, {\n      length: mutation.length + lengthDiff\n    });\n  }\n\n  var mutationWithinPrefixChange = mutation.offset >= originalOffset && mutation.offset + mutation.length <= originalOffset + originalLength && prefixLength > 0;\n\n  if (mutationWithinPrefixChange) {\n    return Object.assign({}, mutation, {\n      offset: mutation.offset + prefixLength\n    });\n  }\n\n  var mutationContainsPrefix = mutation.offset < originalOffset && mutation.offset + mutation.length <= originalOffset + originalLength && mutation.offset + mutation.length > originalOffset && prefixLength > 0;\n\n  if (mutationContainsPrefix) {\n    return [Object.assign({}, mutation, {\n      length: originalOffset - mutation.offset\n    }), Object.assign({}, mutation, {\n      offset: originalOffset + prefixLength,\n      length: mutation.offset - originalOffset + mutation.length\n    })];\n  }\n\n  var mutationContainsSuffix = mutation.offset >= originalOffset && mutation.offset + mutation.length > originalOffset + originalLength && originalOffset + originalLength > mutation.offset && suffixLength > 0;\n\n  if (mutationContainsSuffix) {\n    return [Object.assign({}, mutation, {\n      offset: mutation.offset + prefixLength,\n      length: originalOffset + originalLength - mutation.offset\n    }), Object.assign({}, mutation, {\n      offset: originalOffset + originalLength + prefixLength + suffixLength,\n      length: mutation.offset + mutation.length - (originalOffset + originalLength)\n    })];\n  }\n\n  return mutation;\n}"],"mappings":"AAAA,eAAe,SAASA,cAAc,CAACC,QAAQ,EAAEC,cAAc,EAAEC,cAAc,EAAEC,SAAS,EAAEC,YAAY,EAAEC,YAAY,EAAE;EACtH;EACA;EACA;EACA;EACA,IAAIC,UAAU,GAAGH,SAAS,GAAGD,cAAc;EAC3C,IAAIK,mBAAmB,GAAGN,cAAc,GAAGC,cAAc,IAAIF,QAAQ,CAACQ,MAAM;EAE5E,IAAID,mBAAmB,EAAE;IACvB,OAAOE,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEV,QAAQ,EAAE;MACjCQ,MAAM,EAAER,QAAQ,CAACQ,MAAM,GAAGF;IAC5B,CAAC,CAAC;EACJ;EAEA,IAAIK,sBAAsB,GAAGV,cAAc,IAAID,QAAQ,CAACQ,MAAM,IAAIP,cAAc,GAAGC,cAAc,IAAIF,QAAQ,CAACQ,MAAM,GAAGR,QAAQ,CAACY,MAAM;EAEtI,IAAID,sBAAsB,EAAE;IAC1B,OAAOF,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEV,QAAQ,EAAE;MACjCY,MAAM,EAAEZ,QAAQ,CAACY,MAAM,GAAGN;IAC5B,CAAC,CAAC;EACJ;EAEA,IAAIO,0BAA0B,GAAGb,QAAQ,CAACQ,MAAM,IAAIP,cAAc,IAAID,QAAQ,CAACQ,MAAM,GAAGR,QAAQ,CAACY,MAAM,IAAIX,cAAc,GAAGC,cAAc,IAAIE,YAAY,GAAG,CAAC;EAE9J,IAAIS,0BAA0B,EAAE;IAC9B,OAAOJ,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEV,QAAQ,EAAE;MACjCQ,MAAM,EAAER,QAAQ,CAACQ,MAAM,GAAGJ;IAC5B,CAAC,CAAC;EACJ;EAEA,IAAIU,sBAAsB,GAAGd,QAAQ,CAACQ,MAAM,GAAGP,cAAc,IAAID,QAAQ,CAACQ,MAAM,GAAGR,QAAQ,CAACY,MAAM,IAAIX,cAAc,GAAGC,cAAc,IAAIF,QAAQ,CAACQ,MAAM,GAAGR,QAAQ,CAACY,MAAM,GAAGX,cAAc,IAAIG,YAAY,GAAG,CAAC;EAE/M,IAAIU,sBAAsB,EAAE;IAC1B,OAAO,CAACL,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEV,QAAQ,EAAE;MAClCY,MAAM,EAAEX,cAAc,GAAGD,QAAQ,CAACQ;IACpC,CAAC,CAAC,EAAEC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEV,QAAQ,EAAE;MAC9BQ,MAAM,EAAEP,cAAc,GAAGG,YAAY;MACrCQ,MAAM,EAAEZ,QAAQ,CAACQ,MAAM,GAAGP,cAAc,GAAGD,QAAQ,CAACY;IACtD,CAAC,CAAC,CAAC;EACL;EAEA,IAAIG,sBAAsB,GAAGf,QAAQ,CAACQ,MAAM,IAAIP,cAAc,IAAID,QAAQ,CAACQ,MAAM,GAAGR,QAAQ,CAACY,MAAM,GAAGX,cAAc,GAAGC,cAAc,IAAID,cAAc,GAAGC,cAAc,GAAGF,QAAQ,CAACQ,MAAM,IAAIH,YAAY,GAAG,CAAC;EAE9M,IAAIU,sBAAsB,EAAE;IAC1B,OAAO,CAACN,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEV,QAAQ,EAAE;MAClCQ,MAAM,EAAER,QAAQ,CAACQ,MAAM,GAAGJ,YAAY;MACtCQ,MAAM,EAAEX,cAAc,GAAGC,cAAc,GAAGF,QAAQ,CAACQ;IACrD,CAAC,CAAC,EAAEC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEV,QAAQ,EAAE;MAC9BQ,MAAM,EAAEP,cAAc,GAAGC,cAAc,GAAGE,YAAY,GAAGC,YAAY;MACrEO,MAAM,EAAEZ,QAAQ,CAACQ,MAAM,GAAGR,QAAQ,CAACY,MAAM,IAAIX,cAAc,GAAGC,cAAc;IAC9E,CAAC,CAAC,CAAC;EACL;EAEA,OAAOF,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}